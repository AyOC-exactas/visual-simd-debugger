{
	"info": {
		"_postman_id": "2e3f05e3-3c50-43ca-ac72-11e56e5936cc",
		"name": "simd-visualizer-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "all_data_types_test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Correct output\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.ConsoleOut).to.eql('Exited status: 0')",
							"});",
							"",
							"pm.test(\"Correct number of cells\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.CellRegs.length).to.eql(7)",
							"});",
							"",
							"",
							"pm.test(\"Correct number of registers per cell\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.CellRegs[0].length).to.eql(0)",
							"    pm.expect(jsonData.CellRegs[1].length).to.eql(1)",
							"    pm.expect(jsonData.CellRegs[2].length).to.eql(1)",
							"    pm.expect(jsonData.CellRegs[3].length).to.eql(1)",
							"    pm.expect(jsonData.CellRegs[4].length).to.eql(1)",
							"    pm.expect(jsonData.CellRegs[5].length).to.eql(1)",
							"    pm.expect(jsonData.CellRegs[6].length).to.eql(1)",
							"",
							"});",
							"",
							"",
							"pm.test(\"Correct XMM IDS\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.CellRegs[1][0].XmmID).to.eql(\"XMM0\");",
							"    pm.expect(jsonData.CellRegs[2][0].XmmID).to.eql(\"XMM1\");",
							"    pm.expect(jsonData.CellRegs[3][0].XmmID).to.eql(\"XMM2\");",
							"    pm.expect(jsonData.CellRegs[4][0].XmmID).to.eql(\"XMM3\");",
							"    pm.expect(jsonData.CellRegs[5][0].XmmID).to.eql(\"XMM4\");",
							"    pm.expect(jsonData.CellRegs[6][0].XmmID).to.eql(\"XMM5\");",
							"});",
							"",
							"pm.test(\"Correct XMM Values\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    pm.expect(jsonData.CellRegs[1][0].XmmValues.length).to.equal(16)",
							"",
							"    for(let i = 16; i > 0; i--){",
							"        pm.expect(jsonData.CellRegs[1][0].XmmValues[16-i]).to.eql(i.toString(10));",
							"    }",
							"",
							"    pm.expect(jsonData.CellRegs[2][0].XmmValues.length).to.equal(8)",
							"",
							"    for(let i = 8; i > 0; i--){",
							"        pm.expect(jsonData.CellRegs[2][0].XmmValues[8-i]).to.eql(i.toString(10));",
							"    }",
							"",
							"    pm.expect(jsonData.CellRegs[3][0].XmmValues.length).to.equal(4)",
							"",
							"    for(let i = 4; i > 0; i--){",
							"        pm.expect(jsonData.CellRegs[3][0].XmmValues[4-i]).to.eql(i.toString(10));",
							"    }",
							"",
							"    pm.expect(jsonData.CellRegs[4][0].XmmValues.length).to.equal(2)",
							"",
							"    for(let i = 2; i > 0; i--){",
							"        pm.expect(jsonData.CellRegs[4][0].XmmValues[2-i]).to.eql(i.toString(10));",
							"    }",
							"",
							"    pm.expect(jsonData.CellRegs[5][0].XmmValues.length).to.equal(4)",
							"    pm.expect(jsonData.CellRegs[5][0].XmmValues[0]).to.equal('9.800000')",
							"    pm.expect(jsonData.CellRegs[5][0].XmmValues[1]).to.equal('2.710000')",
							"    pm.expect(jsonData.CellRegs[5][0].XmmValues[2]).to.equal('3.140000')",
							"    pm.expect(jsonData.CellRegs[5][0].XmmValues[3]).to.equal('1.410000')",
							"",
							"    pm.expect(jsonData.CellRegs[6][0].XmmValues.length).to.equal(2)",
							"    pm.expect(jsonData.CellRegs[6][0].XmmValues[0]).to.equal('42.424242')",
							"    pm.expect(jsonData.CellRegs[6][0].XmmValues[1]).to.equal('5.810000')",
							"    ",
							"",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"CellsData\": [\n        {\n            \"code\": \";data\\nbytes: db 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\\nwords: dw 1, 2, 3, 4, 5, 6, 7, 8\\ndoubles: dd 1, 2, 3, 4\\nquads: dq 1, 2\\nfloats: dd 1.41, 3.14, 2.71, 9.8\\n_doubles: dq 5.81, 42.424242\",\n            \"id\": 0,\n            \"output\": []\n        },\n        {\n            \"code\": \"movdqu xmm0, [bytes]\\n;p xmm0.v16_int8\",\n            \"id\": 1,\n            \"output\": [\n                {\n                    \"PrintFormat\": \"/d\",\n                    \"XmmID\": \"XMM0\",\n                    \"XmmValues\": [\n                        \"16\",\n                        \"15\",\n                        \"14\",\n                        \"13\",\n                        \"12\",\n                        \"11\",\n                        \"10\",\n                        \"9\",\n                        \"8\",\n                        \"7\",\n                        \"6\",\n                        \"5\",\n                        \"4\",\n                        \"3\",\n                        \"2\",\n                        \"1\"\n                    ]\n                }\n            ]\n        },\n        {\n            \"code\": \"movdqu xmm1, [words]\\n;p xmm1.v8_int16\",\n            \"id\": 2,\n            \"output\": [\n                {\n                    \"PrintFormat\": \"/d\",\n                    \"XmmID\": \"XMM1\",\n                    \"XmmValues\": [\n                        \"8\",\n                        \"7\",\n                        \"6\",\n                        \"5\",\n                        \"4\",\n                        \"3\",\n                        \"2\",\n                        \"1\"\n                    ]\n                }\n            ]\n        },\n        {\n            \"code\": \"movdqu xmm2, [doubles]\\n;p xmm2.v4_int32\",\n            \"id\": 3,\n            \"output\": [\n                {\n                    \"PrintFormat\": \"/d\",\n                    \"XmmID\": \"XMM2\",\n                    \"XmmValues\": [\n                        \"4\",\n                        \"3\",\n                        \"2\",\n                        \"1\"\n                    ]\n                }\n            ]\n        },\n        {\n            \"code\": \"movdqu xmm3, [quads]\\n;p xmm3.v2_int64\",\n            \"id\": 4,\n            \"output\": [\n                {\n                    \"PrintFormat\": \"/d\",\n                    \"XmmID\": \"XMM3\",\n                    \"XmmValues\": [\n                        \"2\",\n                        \"1\"\n                    ]\n                }\n            ]\n        },\n        {\n            \"code\": \"movdqu xmm4, [floats]\\n;p xmm4.v4_float\",\n            \"id\": 5,\n            \"output\": [\n                {\n                    \"PrintFormat\": \"/d\",\n                    \"XmmID\": \"XMM4\",\n                    \"XmmValues\": [\n                        \"9.800000\",\n                        \"2.710000\",\n                        \"3.140000\",\n                        \"1.410000\"\n                    ]\n                }\n            ]\n        },\n        {\n            \"code\": \"movdqu xmm5, [_doubles]\\n;p xmm5.v2_double\",\n            \"id\": 6,\n            \"output\": [\n                {\n                    \"PrintFormat\": \"/d\",\n                    \"XmmID\": \"XMM5\",\n                    \"XmmValues\": [\n                        \"42.424242\",\n                        \"5.810000\"\n                    ]\n                }\n            ]\n        }\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/codeSave",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"codeSave"
					]
				}
			},
			"response": []
		}
	]
}